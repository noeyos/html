웹프로그래밍(7주)
배미숙 선생님 - 404호 담임선생님

html
css
과제1
javascript ✨
jquery
ajax

--------------------------------------------------------------------------


URL보다 URI가 더 큼
http://www.naver.com
http://localhost/webpro/index.html?id=aaa
전체 uri
url은 http://localhost
그래서 uri속에 url이 들어가는 것임
전체 통합 자원 식별자: uri
자원의 위치(어디에 있느냐(로컬호스트/네이버): url
클라이언트에서 인터넷을 통해 서버에 접속해서 html 문서 읽음

브라우저 없이 네이버 접속 가능? 불가능!
웹브라우저: 웹 페이지가 보일 수 있도록 만드는 것
html문서를 읽어서 눈에 보이는 웹 페이지

HTML: Hyper Text Markup Language
웹페이지를 기술하기 위한 마크업 언어
웹브라우저를 통해서 보여줘야 하는 웹페이지

시작 태그와 종료 태그 사이에 컨텐츠가 있음

시작 태그는 있는데 종료 태그가 없는 경우도 있긴함
예: <br> 태그 (브라우저에서 줄 바꾸는 태그)
<br> -> 시작태그만 있음 컨텐츠, 종료 태그 없음

팀 버너스리: html 개발
차세대 웹 기술인 시맨틱 웹 기술 표준화 작업하는 사이트: w3c
1994냔 팀 버너스리가 설립
문서 전송 규칙(프로토콜)과 가이드라인 개발중임

우리가 배울 html 버전: html5 (14년에 나왔는데 아직까지 최신 버전임)
xhtml은 중단됨
x 붙은 거 안 붙은 거 차이점:
html은 유연함
java는 ;나 } 등 안 찍으면 에러나는데
html은 오류 안 남
xhtml은 자바처럼 규칙이 엄격함
(그래서) xhtml은 없어짐

html5 지원 목록:
- 완전한 CSS3 지원
- 비디오와 오디오 지원
- 2D/3D 그래픽 지원 
- 로컬 저장소 지원 
- 웹 SQL 데이터베이스 지원 
- 웹 애플리케이션 지원 

html5에서 db지원하긴 하는데 영구적 저장은 안 됨. 일시적임.
자료를 영구적으로 저장하기 위해선 oracle 같은 dbms랑 연동해서 저장해줘야 함
웹 어플리케이션 지원 역시 일시적인 동작임.

html5는 그전 버전과 다르게 웹브라우저에 비디오나 오디오 재생을 지원함
예전에는 어도비플래시 같은 걸 통해서야 재생이 가능했는데
html5에서는 <audio>, <video> 같은 태그를 사용해서 재생이 가능해짐

html5 신기능:
1) 오프라인 웹 애플리케이션 
- 네트워크가 연결되지 않은 상태에서도 실행 가능
2) 드래그 앤 드롭(Drag-and-drop) 
- 요소들을 마우스로 끌어서 넣을 수 있음
3) 웹 스토리지(Web Storage) 
- 쿠키를 대체할 수 있는 웹 저장소 기능 제공
4) 위치 정보(Geolocation) 제공
- 지도 기능
5) 웹 SQL 데이터베이스(Web SQL Database)
6) 파일 API 지원 
- 파일 업로드와 파일 관리 기능 제공
7) 웹 소켓(Web Socket) API 제공
- 서버와 브라우저 간의 양방 향 통신 기능 제공

위치 정보 제공(지도 기능) :
실질적으로는 html5에서 제공하는 지도 기능은 사용 잘 안 함
구글API등을 이용해서 사용함

html5 <-> css3 <-> JS
상호작용 필요
html5: 웹페이지 내용
css3: 웹페이지 스타일
JS: 웹페이지 상호작용(클릭해서 동작하는 건 스크립트)

자바는 웹에서 직접 실행하는 게 아니라
웹 프로그램을 실행하기 위해서 back-end에서 실행하는 것
(그렇기 때문에 웹 프로그램에서 1순위는 JS, 2순위가 JAVA)

--------------------------------------------------------------------------

(노트패드.exe 파일 설치하고 맨 마지막에 update어쩌고 no 클릭)

1) 설정 - 환경설정 - 새 문서 - 프로그래밍 언어 - html로 변경
2) 실행 - 단축키 변경 - launch in Chrome - ALT랑 SHIFT 체크 해제 - ok - close
3) Ctrl+N 새로 만들기
4) Naver 우클 페이지 소스 보기 - 소스 전체 노트패드에 새로 만든 파일에 복붙 - 저장
5) Ctrl+R 로 소스 코드 실행
6) Ctrl+F 'css' 검색해서 첫번째, 두번째 <link rel = stylesheet 어쩌구> 삭제 - 저장
ㄴ css가 없으면 6번 실행한 것처럼 보이는 것 (css가 있으면 예쁘게 보이는 거)
(Ctrl+z 하면 삭제 취소하고 저장하고 실행하면 css 있는 원래 naver 디자인 상태로 볼 수 있음)

--------------------------------------------------------------------------

웹페이지 디자인(스타일)은 css가 담당
클릭해서 동작들을 실행하려면 자바스크립트가 있어야 함!
html이 없으면 css, js 불가능
가장 기본은 html !!!

--------------------------------------------------------------------------

Ctrl+R을 새 창으로 실행 (노트패드에서) 
F5: 열린 창에서 새로 고침 (웹브라우저에서)
Shift+F5: 강력 새로 고침 (웹브라우저에서)
브라우저 캐시에 내가 실행했던 내용이 저장되는데
그러면 내가 소스를 바꿔도 바꾼 내용이 브라우저에 적용이 안 될 때가 있음
이 저장된 내용으로 계속 실행이 됨 (수정한 내용이 안 나오고 예전에 저장한 내용이 계속 실행됨)
분명 소스를 고쳤는데 브라우저에 안 나타난다면 Shift F5를 누르면 됨

--------------------------------------------------------------------------

<br> 태그: 강제 줄 바꿈
- 닫는 태그 없음

<p> 태그: 자동 줄 바꿈 (paragraph) (짧은 문단)
- <p> 태그를 사용하면 <br> 사용 안 해도 됨
- 닫는 태그 필요
- 콘텐츠, 위아래 끝까지 하이라이트 됨

브라우저에서 F12 누르면 DevTools(개발자도구) 창 열림

속성이 필요한 경우가 있고 필요하지 않은 경우가 있음
필요한 경우를 필수 속성이라고 부름

<a> 태그: 하이퍼링크(페이지 이동을 수행하는 태그)
a태그의 필수 속성: href="이동한 페이지 이름"
<a href="http://www.naver.com">네이버</a>

<h1></h1> 헤더 (h6까지 있음)
타이틀로 강조할 때 사용
h1~h3 정도가 헤더로 적당함
헤더 태그는 자동으로 줄이 바뀜
헤더도 p처럼 콘텐츠, 위아래 끝까지 하이라이트 됨

--------------------------------------------------------------------------

html요소에는 block요소와 inline요소가 있음

block요소는 줄 끝까지 한줄 전체를 차지 하는 요소
자동으로 줄이 바뀐다

inline요소는 내용이 있는 부분까지만 차지 하는 요소
자동으로 줄이 바뀌지 않는다
줄을 바꾸려면 <br>태그 사용 해야한다

block 요소(콘텐츠, 위아래 끝까지 하이라이트 되는)
<p>, <h1~6>, <pre>

inline 요소(글자만큼만 하이라이트 되는)

html 주석 처리: <!-- -->
우클 페이지 소스 보기에서 보면 주석처리 된 것도 다 보임

<pre> </pre>
띄어쓰기 적용됨
자동 줄 바꿈 됨

<html lang = "ko"> //특별한 기능을 하는 것은 아님
lang = "" ← 권장 속성
<a> 태그는 페이지 이동이라는 특별 기능을 하지만 <html lang = "ko">는 아님

--------------------------------------------------------------------------

html 소스 내부에서 스타일을 줄 수 있음

<style>
글자 크기, 백그라운드, 글자 색깔 등 스타일 설정 가능

id 스타일 지정할 땐 #id이름 {} (특별하게 지정된 것만 하고 싶을 때)
class 스타일 지정할 땐 .class이름{}

<hr> 태그: 가로선을 그리는 태그
닫는 태그 없음


--------------------------------------------------------------------------
Ctrl+D 해당 줄 복붙
--------------------------------------------------------------------------

border-width 테두리 선 굵기
border-color 테두리 선 색깔
border-style
ㄴsolid 실선
  dotted 점선
  dashed 하이픈

-width, -color, -style 다 입력 안 하고
border: 5px dotted green;
이런 식으로 압축해서 사용 가능
그대신 width style color 순서 꼭 지켜야 함

테두리 위치 지정해서 스타일 지정해줄 수도, 지울 수도 있음

ex) border-left : none;
    border-right : none;

    border-left : 5px double green;
    border-right : 15px dotted pink;

border : ~~~;
==> 세가지 속성 압축되어 있는 형태
스타일 필수 항목
width나 style은 생략 가능

border 기본 초기세팅 색상 black
border:solid 기본 초기세팅 픽셀 3px

텍스트 정렬(좌측정렬/우측정렬/가운데정렬)
text-align : left/right/center;
 
클래스로 태그 다 묶어서 스타일 지정 가능
혹은 태그1, 태그2, 태그3 {...} 방식으로도 가능
그대신 우선 순위가 있음
원칙은 위에서 아래로 실행이 되는데
태그 보다 클래스가 우선 순위임

<div> 큰 단락 (<p> 작은 단락 )
태그들 하나에 묶을 수 있음

<body>
    <div>
	 <h1>WEB 프로그래밍</h1>
	 <h2>HTML</h2>
	 <p>문서의 구조 정의</p>
	
	 <h2>CSS</h2>
	 <p>문서의 스타일을 정의</p>
	
	 <h2>JAVASCRIPT</h2>
	 <p>문서의 동작을 정의</p>
     </div>
</body>

--------------------------------------------------------------------------
스타일에서 주석 처리 할 땐 /*   */ 사용
--------------------------------------------------------------------------

margin(압축형태)
margin-left
margin-right
margin-top
margin-bottom

- top과 left가 기준
- 이미 여백이 정해주는 px보다 더 크다면 margin으로 준 값 무시함
- 테두리 바깥 쪽 여백 지정해주는 태그

margin: 50px ==> 상하좌우 전부 50px만큼 여백을 준다
margin: 20px 50px; ==> 상하 20px, 좌우 50px (좌측 50기준)
margin: 10px 20px 30px; ==> 상, 좌우, 하
margin: 20px 50px 30px 10px; ==> 상, 좌, 하, 우 (순서 시계방향)

margin 50px auto; ==> 자동으로 좌우 정가운데로 위치하게 함
근데 테두리 기준임

겹쳐있는 부분은 margin 중복 적용 안 됨
그냥 겹쳐짐

F12 눌러서 style 수정하는 건 실질적으론 적용 안 됨
그냥 미리보기 용도임

--------------------------------------------------------------------------

<ul>
   <li> </li>
</ul>

./ ==> 현재 위치
자동으로 상하 공백 가지고 있음 (좌우는 없음)
블럭요소

width 가로 길이 맞출 때
height 세로 길이 맞출 때

width, legnth 준 값 종료 시킬 때 clear : both;

<ol> list-style-type:
1. 기본 타입 숫자
2. lower-alpha
3. upper-alpha
4. hangul

--------------------------------------------------------------------------

가로로 정렬하는 방법 2번째

display : flex
fiex-direction : column
옆으로 배치하려고 하는 요소의 부모 요소가 필요하다.
-> <div></div> 로 묶고 <div>에 스타일 추가하기
기본 방향 가로(column), 세로로 하고 싶으면 row


--------------------------------------------------------------------------

<a> 태그 속성엔 href 와 target이 있음
target이 생략되어 있으면 현재 열려있는 페이지에 그대로 열림 (target"_self")
target="_blank" => 새 페이지에서 열기
href는 필수 속성, target은 있어도 없어도 됨

--------------------------------------------------------------------------

<img> 이미지 태그
닫는 태그 없음
src는 필수 속성 alt는 표준 속성(쓰는 것 권장)
이미지가 제대로 뜨지 않을 때 내보낼 문자가 alt="   "

--------------------------------------------------------------------------

<ul>
  <li><img src="../images/Koala.jpg" alt="코알라"></li> ==> 상대 path
  <li><img src="http://localhost/webpro/images/cloud03.jpg" alt="구름"></li> ==> 절대 path
</ul>

./ 현재 디렉토리
../ 상위 디렉토리

--------------------------------------------------------------------------

<table>
   <tbody> --> 생략가능. 보통 생략하는 편.
      <tr>
         <th> --> table head
         </th>
         <td> --> data
         </td>
       </tr>
   </tbody>
</table>

<th>는 자동으로 가운데 정렬, 글씨체 bold


--------------------------------------------------------------------------

<iframe>

현재 문서 안에 다른 문서를 포함한다
a 태그에서 target속성값으로 iframe의 name속성의 값을 지정할 수 있다


[코드]

<a href="http://www.naver.com" target="_blank">네이버</a>
<a href="../0420/table연습.html" target="ifr">table연습</a>
<a href="http://localhost/webpro/0419/리스트4.html" target="ifr">리스트4</a>
	
<br><br>
<iframe src="../0419/텍스트서식.html" name="ifr"></iframe>

==> table연습(밑줄) 누르면 iframe 안에서 열림


---------------------------------------------------------------------------

block요소(자동줄바꿈) : div, p, h1~h6, table, ul, ol, li, hr, iframe
inline요소: a 

인라인요소는 크기(width, height)를 지정할 수 없음 (<img>태그 제외)
인라인은 입력된 글자 크기만큼만 스타일 지정됨

---------------------------------------------------------------------------

overflow된 거 (지정된 칸을 넘어서 삐져나온 데이터들)
hidden/scroll/auto 할 수 있음

hidden 넘쳐나는 부분 안 보이게 감추기
scroll 스크롤바 생김 (내용이 넘치든 안 넘치든 스크롤바 생김)
auto 상황에 따라서 다름 (안 넘치면 스크롤바 안 생기고, 넘치면 스크롤바가 생김)


---------------------------------------------------------------------------

<video>, <audio>

muted 있으면 autoplay됨
muted 없으면 autoplay 코드 작성해도 autoplay 안 됨

---------------------------------------------------------------------------

get과 post의 차이:

get
무언갈 요청했을 때 주소 뒤에 ?해서 나오는 방식 => get
내가 입력한 내용(데이터)이 url 주소 ? 뒤에 나옴
보안이 약하다고 볼 수 있음

post
안 보이는 방식
내가 입력한 내용(데이터)는 request라는 헤더(Hearders) 속에 감추어져(숨겨져) 있음

데이터가 많을 때는 get보다 post를 씀


---------------------------------------------------------------------------

<form action="서버페이지" method="get또는post">
</form>

---------------------------------------------------------------------------

<input type="submit">
<button type="submit"></button>

두 태그 같은 역할함
그대신 button은 닫는 코드가 있음
그리고 안에 컨텐츠(텍스트) 넣어줘야함
input은 자동으로 제출이라는 글자가 생김

form 블럭요소
input, button 인라인요소

<input type="button">은 단독으로는 기능이 없지만 
JavaScript로 기능을 직접 만들어서 사용이 가능하다

value="" <== value속성을 사용해서 이름 바꿔줄 수 있음
<input type="submit" value="전송">
<input type="button" value="확인">

<input type="button" value="확인" onclick="f1()">
<input type="button" value="확인" onclick="f1()">

onclick="" <== 함수 호출
<script>에서 정의해놓은 함수를 호출함

html 코드에서 java코드를 출력하려면 <%= %> 사용
<%= (변수명) %>

<script>
fuction f1() {
     alert("Hello");
}
</script>

alert => 이미 정의된 함수

---------------------------------------------------------------------------

<<script에서 html요소로 접근하기 방법>>

1. html요소의 id를 이용한 방법(제일 많이 씀)
vid = document.getElementById('id');
vpw = document.getElementById('pw');
documemt.querySelector("#id");
document.querySelector("#pw");


2. tag이름을 이용하는 방법
vinputs = document.getElementsByTagName('input');
documemt.querySelector("input"); ==> 1번째 input만 검색함
document.querySelectorAll("input"); ==> 모든 input에 대해 검색함

3. id나 class이름을 이용하는 방법
vclassd = document.getElementsByClassName('id');
vclassp = document.getElementsByClassName('pw');
document.querySelector(".id"); ==> 아무리 여러개 있어도 첫번째것만 찾음
document.querySelector(".pw");

document.querySelectorAll(".id");
document.querySelectorAll(".pw");

4. name을 이용하는 방법
vnamesd = document.getElementByName('id');
vnamesp = document.getElementByName('pw');

---------------------------------------------------------------------------

JavaScript는 변수의 타입 안 씀
그냥 변수만 써주면 됨

---------------------------------------------------------------------------

input태그 name이라는 속성이 있어야 서버(jsp)로 데이터가 넘어가
password 빼고 텍스트 입력하는 모든 것들 인풋태그 타입속성값은 텍스트
input type="text"

input 태그의 기본 타입값은 text라 type="text" 생략가능함

radio 하나만 선택할 수 있음
checkbox 여러개 선택할 수 있음
name속성 이름 같아야 함

JSP 주석 방법: <%-- --%>
자바가 포함된 문장을 주석 처리 하려고 한다면 <%-- -->을 사용해야함
html문장내(body)에서는 <!-- -->은 가능함

radio/checkbox value값 안 주면 on/주소값으로 뜸

아무것도 선택하지 않았을 때 기본값으로 주고 싶으면 속성 checked 넣어주면 됨
radio에서 checked를 모두 넣어주면 맨 마지막 checked가 기본값(초기값)으로 설정됨
checkbox는 중복 기본값 가능

form태그 submit해서 전송할 때 action속성, method속성 필요
그렇지 않다면 생략

정규식(regex): /    /
/로 시작해서 /로 끝남

/[a-z]/ ==> a부터 z까지만 올 수 있게 형식을 지정해줌


<select></selected>
원하는 옵션 초기값으로 정해주기 => <option selected>
여러개 선택 가능하게 하려면 select에 multiple 속성 넣어주면 됨
select는 value가 없어도 option 콘텐츠가 value값으로 넘어간다

<span>이랑 비슷한 거 <label>
<label> inline요소
줄 안 바뀜, width&height값 못 줌

inline요소와 block요소를 둘 다 가지고 있으면
줄이 바뀌지 않으면서 width&height값 줄 수 있음
==> display : inline-block
줄 안 바꾸면서 크기를 지정하고 싶을 때 사용하면 됨

<style>
label {
	display : inline-block;
	width : 80px;
	height : 30px;
}
</style>

span태그에서도 display : inline-block 사용 가능


name 속성은 jsp로 데이터를 전달하는 용도

<label for=""> input태그 안에 있는 id속성이랑 매칭


fieldset 자동으로 테두리 생성됨
fieldset에 이름 주고 싶으면
<fieldset> 태그 안에 <legend>텍스트</legend> 하면 됨

안쪽 여백 padding
바깥쪽 여백 margin

onchange="", onclick="" 함수 호출 속성

readonly (읽기전용) - jsp에서 값 사용 가능
disabled (사용불가) - jsp에서 값 사용 불가

required(필수항목) 속성
pattern 속성값에 맞는 값을 반드시 입력을 해야 됨

---------------------------------------------------------------------------

1) html 파일 내에서 <style> 안에 코드를 입력해서 스타일 주는 것 => 내부 스타일 
2) .css 확장자로 (별도의 파일로) 스타일 주는 것 => 외부 스타일
3) 태그에 바로 style 속성 넣어서 스타일 적용하는 것 => inline style

우선 순위:
inline스타일 - 내부스타일 - 외부스타일

css 장점:
여러 페이지에 동일한 css를 공유하여 한번에 레이아웃 제어 가능 -> 개발 시간 단축
naver같은 큰 사이트 관리할 때 필요


표준 규칙
id : 영문 소문자 작성 권장, 중복X
class : 중복O
tag : 영문 소문자 작성 권장

2.0em => 부모를 기준으로 2배
body 태그 폰트 사이즈 기본값 16px
폰트 사이즈 2.0em 하면 32px되는 거임
2.0rem => 루트(<body>)를 기준으로 

---------------------------------------------------------------------------

div + p
div 기준으로 뒤에 나오는 (p)형제들 중 첫번째꺼

div ~ p
뒤에 나오는 모든 (p)형제들

순서도 중요함

link 링크 기본 컬러
visited 링크를 방문하고 난 후
hover 마우스 커서를 대고 있을 때
active 누르고 있을 때
(active 실행할 때 hover 같이 실행됨)

링크에 밑줄 있는 거 => text-decoration 중 하나
underline : 밑줄
overline : 글자 위에 줄
line-through : 텍스트 관통

태그[id/class^=단어] < 단어로 시작하는 
태그[id/class$=단어] < 단어로 끝나는

예)
p[id^=a] {
	color : green;
	font-size: 2.0em;
	font-weight: bold;
}

p[class$=a] {
	background: pink;
}

top-left
top-center
top-right

center-left
center-center
center-right

bottom-left
bottom-center
bottom-right

---------------------------------------------------------------------------

- 시멘틱 요소(Semantic elements)
브라우저에게 요소의 의미나 목적을 명확하게 알려주는 요소이다.
레이아웃을 만들때 쓰는 것.
의미가 있는 요소라면 div보다는 시멘틱 태그를 사용한다.

<header></header>
<asdie></asdie>
<section></section>
<footer></footer>


---------------------------------------------------------------------------

JavaScript

var/let/const 변수 타입

상수를 선언할 때 const 사용

let은 변수 이름 중복해서 사용 불가
변수 이름 중복을 방지하기 위해 let 타입을 사용함
let은 var보다 좁은 범위에서 사용됨

let 사용 가능 범위:
블럭요소. 블럭 내부에서만 사용 가능.

var 사용 가능 범위:
블럭 외부에서도 사용 가능.

브라우저가 가진 최상위 객체: window
window <- 내장 객체임

예)
window.alert();
window.document.write();
(window. 생략 가능)

코드는 위에서부터 아래로 실행되기 때문에
만약 script가 body 위에 있으면 body 코드보다 script가 먼저 실행됨
이 때문에 가끔 스크립트에서 tag/class/id 못 찾는 경우가 발생함

function 변수() { } 같은 형식이면
script태그가 위에 있어도 상관없음
함수를 실행하는 동작을 body에서 해야만 실행되기 때문

- document.write()
내가 만들어놓은 html에서 출력이 되는 게 아니라
새로운 document가 생성이 되고 그곳에서 출력됨
실제로 웹 제작에서 쓰는 경우 없음 (사용해도 테스트용으로만)

innerText
html 태그를 문자열로 처리함 ( 예: <br> --> "<br>" )

innerHTML
html 태그를 그대로 처리함 ( 예: <br> --> (라인바꿈) )

---------------------------------------------------------------------------

스크립트가 head에 있는데 tag/class/id를 못 찾을 때 :

<script>
window.onload = function() { ... }
</script>

---------------------------------------------------------------------------

appendChild 2가지 기능
순서 바꿈(잘라내서 붙여넣기)
새로 생성


document.getElementsByTagName('태그이름')[몇번째]
예) ducument.getElementsByTagName('input')[5]


외부스타일과 내부스타일의 형식이 같아야
내부스타일에서 외부스타일 변경(덮어쓰기) 가능

---------------------------------------------------------------------------

window.onload = function() {}
$(document).ready(function () {})
둘이 같은 개념/동작


$(document).ready(function() {
	...
})

$(function(){	// 로그 즉시 실행되는 콜백 함수 (자동으로 background에서 호출되는 함수)
	...
})

window.onload = function() {
	...
}

---------------------------------------------------------------------------
		$('#btn1').on('click', function() {
			// h2의 자식 a의 스타일에 테두리 설정 - solid
			$('h2 > a').css('border', '2px solid red');
			
			// h2의 후손 a의 배경색 노란색으로 설정
			$('h2 a').css('background', 'yellow');
		})
		
		$('#btn2').on('click', function() {
			// h3 다음의 모든 형제의 배경색을 변경, 길이지정, 가운데정렬
			
/*			방법1.
 			$('h3 ~ p').css('background','yellow');
			$('h3 ~ p').css('width','50%');
			$('h3 ~ p').css('text-align', 'center');
			----------------------------------------------------------- 
			방법2.
 			$('h3 ~ p').css('background','yellow').css('width','50%').css('text-align', 'center');
			-----------------------------------------------------------
			방법3.																							*/
			$("h3 ~ p").css({"background-color":"yellow", "width" : "200px", "text-align" : "center"});
			
			
			// h3 다음의 첫번째 형제의 글자를 굵게, 크게 : font-weight
			$('h3 + p').css({'font-weight' : 'bold',
							 'font-size' : '2.0em'});
			
		})	

---------------------------------------------------------------------------

select에서 multiple 속성이 있다면
option selected 된 것들이 초기값으로 선택되어 있고 
multiple이 아니라면 여러개의 potion selected 중 가장 마지막 것이 선택되어져 있음

jquery에서 this ' '안에 못들어감
$('option:selected', this).val()
이런식으로 써줘야됨

----

hidden과 visible의 차이

attr : 타입 비교

button 태그 타입 따로 지정 안 해주면 type=submit